# -*- coding: utf-8 -*-
"""Gold Live Forecasting using rf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OMoQNvY6L31tX65AQwkbg6DUvFF8S2Aq

# Import library
"""
import streamlit as st
#import yfinance as yf
import datetime as dt
import pandas as pd
import numpy as np
import seaborn as sns
#from numpy import arange
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import RandomizedSearchCV
import plotly.express as px
import plotly.graph_objects as go

import warnings
warnings.filterwarnings('ignore')

selectbox = st.sidebar.selectbox(
    "Model Selection",
    ["Random Forest", "LGBM & Time Series Split","Linear Model","Exp Model"]
)

title = st.sidebar.text_input('How many years of dataset Ex: 2y')



" # Gold Price Prediction"

"""# Importing data """

import yfinance as yahooFinance

header = st.container()

with header:
    st.title('Gold Trend Prediction')
    #html_temp = """
    #<div style ="background-color:white;text-align:center;">Streamlit Gold Price Prediction ML App </h2>
    #</div>
    #"""
    gold_price = yahooFinance.Ticker("GC=F")

    Data = gold_price.history(period= title)

    Data

    """# Upsampling"""

    data = Data.resample('D').mean()
    data.head(7)

    price= data.interpolate(method = 'linear')
    price.head(7)

    price

    price.to_csv('Gold.csv')

    df = pd.read_csv('Gold.csv')  ### we will use this df data to perform candlestick charts in visualizations

    df['Date'] = pd.to_datetime(df['Date'])

    df.drop(columns=['Dividends','Stock Splits','Volume'],inplace=True)

    """# Data Understanding"""

    price.isna().sum()

    price.columns

    price.shape

    price.info()

    price.describe().T

    len(df)



    """# Data Visualization"""

    plt.figure(figsize=(7,5))
    sns.heatmap(df.corr(),cmap='Blues',annot=True)


    fig = px.line(price,title='Gold Price',labels={'Date':'Months','value':'Daily Gold price'})

    fig.update_layout(title={'font_family':'Georgia','font_size':23,'x':0.5})
    #fig.show()
    st.plotly_chart(fig)
    fig = go.Figure(data=[go.Candlestick(x=df['Date'],
                    open=df['Open'],
                    high=df['High'],
                    low=df['Low'],
                    close=df['Close'])])
    st.plotly_chart(fig)
    #fig.show()




# Model Building"""

price.drop(columns=['Volume','Dividends','Stock Splits'],inplace=True)

x = price.drop(['Close'],axis =1)
y = price['Close']

# Model training, testing and evalution """

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.26,  random_state=12)

scale = StandardScaler()
x_train = scale.fit_transform(x_train)
x_test = scale.transform(x_test)

model = RandomForestRegressor()

grid_rf = {
'n_estimators': [20, 50, 100,15,25,75],
'max_depth': np.arange(1, 20, 1,),
'min_samples_split': [2, 10, 5],
'min_samples_leaf': np.arange(1,25,10,   dtype=int),
'bootstrap': [True, False],
'random_state': [10,20,40,50,42,2]
}
rscv = RandomizedSearchCV(estimator=model, param_distributions=grid_rf, cv=3, n_jobs=-1, verbose=2, n_iter=200)
rscv_fit = rscv.fit(x_train, y_train)
best_parameters = rscv_fit.best_params_
print(best_parameters)

model = RandomForestRegressor(n_estimators=50, random_state=50, min_samples_split=2, min_samples_leaf=1, max_depth=10, bootstrap=True)
model.fit(x_train, y_train)
predict = model.predict(x_test)
print(predict)
print(predict.shape)


st.write(f' ## Train Score : {model.score(x_train, y_train) * 100:.2f}% and Test Score : {model.score(x_test, y_test) * 100:.2f}% using Random Tree Regressor.')
errors = abs(predict - y_test)
mape = 100 * (errors / y_test)
accuracy = 100 - np.mean(mape)
st.write(' ## Accuracy:', round(accuracy, 2), '%.')

predictions = pd.DataFrame({"Predictions": predict}, index=pd.date_range(start=data.index[-1], periods=len(predict), freq="D"))
#predictions.to_csv("Predicted-price-data.csv")
#colllects future days from predicted values

onemonth_df = pd.DataFrame(predictions[:30])
#onemonth_df.to_csv("one-month-predictions.csv")

onemonth_df

fig = px.line(onemonth_df,title='Gold Price',labels={'Date':'Months','value':'Daily Gold price'})
fig.update_layout(title={'font_family':'Georgia','font_size':23,'x':0.5})
#fig.show()
st.plotly_chart(fig)



